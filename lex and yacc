*
1.b. Write YACC program to evaluate arithmetic expression involving operators: +, -, *, and /
 
LEX Part
*/
 
%{
     #include "y.tab.h"
     extern int yylval;
%}
 
%%
 
[0-9]+ {yylval = atoi(yytext); return NUM;}
[+\-*/] return yytext[0];
. return yytext[0];
\n return 0;
 
%%
 /* 
 1.b. Write YACC program to evaluate arithmetic expression involving operators: +, -, *, and / 
  
 YACC Part 
 */ 
  
 %{ 
     #include <stdio.h> 
     #include <stdlib.h> 
     int yylex(); 
     int yyerror(); 
 %} 
  
 %left '+' '-' 
 %left '*' '/' 
 %token NUM 
  
 %% 
  
 expr: stmt {printf("Result=%d\n", $1);} 
     ; 
 stmt: stmt '+' stmt {$$ = $1 + $3;} 
     | stmt '-' stmt {$$ = $1 - $3;} 
     | stmt '*' stmt {$$ = $1 * $3;} 
     | stmt '/' stmt {if($3 != 0) {$$ = $1 / $3;} else {yyerror();}} 
     | NUM {$$ = $1;} 
     ; 
  
 %% 
  
 void main() 
 { 
     if(yyparse() == 0) 
     { 
         // Do Nothing, Result is already printed 
     } 
     else 
     { 
         yyerror(); 
     } 
 } 
  
 int yyerror() 
 { 
     printf("Invalid Expression\n"); 
     exit(0); 
 } 
  
  
  
  
  1.a. Write a LEX program to recognize valid arithmetic expression. Identifiers in the
expression could be only integers and operators could be + and *. Count the
identifiers & operators present and print them separately. 
*/
 
%{
     int opnd = 0, ac = 0, sc = 0, mc = 0, dc = 0, valid = 0;
     void ext();
%}
 
%x OPER
%%
 
[a-zA-Z0-9]+ {valid = 1; opnd++; BEGIN OPER;}
<OPER>"+" {if(valid == 1) {valid = 0; ac++;} else {ext();}}
<OPER>"-" {if(valid == 1) {valid = 0; sc++;} else {ext();}}
<OPER>"*" {if(valid == 1) {valid = 0; mc++;} else {ext();}}
<OPER>"/" {if(valid == 1) {valid = 0; dc++;} else {ext();}}
<OPER>[a-zA-Z0-9]+ {if (valid == 0) {valid = 1; opnd++;} else {ext();}}
<OPER>. ext();
<OPER>\n return 0;
. ext();
\n return 0;
 
%%
 
void ext()
{
     printf("Invalid Expression");
     exit(0);
}
void main()
{
     printf("Enter Expression\n");
     yylex();
     printf("Valid Expression\n");
     printf("Count Operand=%d, Plus=%d, Minus=%d, Multiply=%d, Divide=%d\n", opnd, ac, sc, mc, dc);
}
 
 
 
 
 %{
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
int yylex();
int yyerror();
extern FILE * yyin;
int idCount=0,digitCount=0,keyCount=0,opCount=0;
%}

%token OPERATOR DIGIT KEYWORD IDENTIFIER;

%%

input:
DIGIT input{digitCount++;}
|IDENTIFIER input{idCount++;}
|KEYWORD input{keyCount++;}
|OPERATOR input{opCount++;}
|DIGIT {digitCount++;}
|IDENTIFIER {idCount++;}
|KEYWORD {keyCount++;}
|OPERATOR {opCount++;}
;
%%
void main(int argc,char* argv[])
{
if(argc!=2)
{
printf("usage : %s<src file>\n",argv[0]);
return;
}
FILE * myfile=fopen(argv[1],"r");
yyin=myfile;
do{
yyparse();

}while(! feof(yyin));
printf("Numbers = %d\nKeywords = %d\nIdentifiers = %d\nOperators = %d\n",digitCount,keyCount,idCount,opCount);
}

int yyerror()
{
printf("Error");
exit(-1);
}

---------------------------------------------------------------------------------------------------------
LEX

%{
#include<stdio.h>
#include"y.tab.h"
extern int yylval;
%}


%%
[\t];
[+\-*=<>] {printf("%s is operator\n",yytext);return OPERATOR;}
[0-9]+ {yylval=atoi(yytext);printf("%d is number\n",yylval);return DIGIT;}
int|char|bool|float|void|for|do|while|if|else|return|void {printf("%s is keyword\n",yytext);return KEYWORD;}
[a-zA-Z0-9]+ {printf("%s is Identifier\n",yytext);return IDENTIFIER;}
. ;
%%




LEX Part
*/
 
%{
     #include "y.tab.h"
%}
 
%%
 
a return A;
b return B;
. return yytext[0];
\n return 0;
 
%%  

YACC Part 
%{ 
     #include <stdio.h> 
     #include <stdlib.h> 
     int count=0; 
     int yylex(); 
     int yyerror(); 
 %} 
  
 %token A B 
 %% 
  
 str: T B 
     ; 
 T: A T {++count;} 
     | 
     ; 
  
 %% 
  
 void main() 
 { 
     int n; 
     printf("Enter n value\n"); 
     scanf("%d\n", &n); 
  
     if(yyparse() == 0 && n == count) 
     { 
         printf("Valid String\n"); 
     } 
     else 
     { 
         yyerror(); 
     } 
 } 
  
 int yyerror() 
 { 
     printf("Invalid String\n"); 
 } 
  


%x CMNTML CMNTSL
%%
"/*" {BEGIN CMNTML;}
<CMNTML>. ;
<CMNTML>\n;
<CMNTML>"*/" {BEGIN 0;}
"//" {BEGIN CMNTSL;}
<CMNTSL>. ;
<CMNTSL>\n {BEGIN 0;}
%%

void main(int argc,char * argv[])
{
if(argc!=3)
{
printf("Usage: %s<src file><dest file>\n",argv[0]);
return;
}
yyin=fopen(argv[1],"r");
yyout=fopen(argv[2],"w");
yylex();

}

